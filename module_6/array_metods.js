//! –ü–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤–∞
//? –°–∏–Ω—Ç–∞–∫—Å–∏—Å array.method(callback[currentValue, index, array])

// array.method((item, idx, arr) => {}); // –ª–æ–≥—ñ–∫–∞ –º–∞–π–∂–µ –∫–æ–∂–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó

// array.method((item) => {
//   // –ª–æ–≥—ñ–∫–∞ —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –∫–æ–∂–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
// });

//* Array.forEach() - array.forEach(callback[currentValue, index,array])

//* - –ø–µ—Ä–µ–±–∏—Ä–∞—î (–∫–æ–ª–µ–∫—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
//* - –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ)
//* - –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î
//* - brake-–æ–º –Ω–µ –ø–µ—Ä–∏–≤–∞—î—Ç—å—Å—è, —è–∫ for

const numbers = [1, 2, 3, 4, 5];
//console.log("üöÄ ~ numbers:", numbers);

// for
// for (let i = 0; i < numbers.length; i += 1) {
//   console.log(numbers[i]);
// }

// forEach
// numbers.forEach((num) => console.log(num));
// forEach + –¥–æ—Å—Ç—É–ø –¥–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞
// numbers.forEach((num, idx) => console.log(`index ${idx} : value ${num}`));

//* Array.map() - array.map(callback[currentValue, index,array])

//* - –ø–µ—Ä–µ–±–∏—Ä–∞—î (–∫–æ–ª–µ–∫—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
//* - –Ω–µ –∑–º—ñ–Ω—é—î (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ)
//* - –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª–ª–ª–µ–∫—Ü—ñ—é (–Ω–æ–≤–∏–π –º–∞—Å–∏–≤)
//* - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –º–∞—Å–∏–≤–∞

const doubleArray = numbers.map((num) => num * 2);
// console.log("üöÄ ~ doubleArray:", doubleArray);

const users = [
  { id: "001", name: "Mango", isActive: true, daysActive: 10 },
  { id: "002", name: "Poly", isActive: false, daysActive: 5 },
  { id: "003", name: "Qwerty", isActive: true, daysActive: 8 },
  { id: "004", name: "Ajax", isActive: false, daysActive: 2 },
];

const names = users.map((user) => user.name);
// console.log("üöÄ ~ names:", names);

//* Array.filter() - array.filter(callback[currentValue, index,array])

//* - –ø–µ—Ä–µ–±–∏—Ä–∞—î (–∫–æ–ª–µ–∫—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
//* - –Ω–µ –∑–º—ñ–Ω—é—î (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ)
//* - –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª–ª–ª–µ–∫—Ü—ñ—é (–Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –Ω–∞–≤—ñ—Ç—å –∑ 1 –µ–ª–µ–º–µ–Ω—Ç–æ–º)
//* - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Å–∏–≤–∞

// console.log(numbers.filter((num) => num > 3));
// console.log(numbers.filter((num) => num === 4));

// –∑–Ω–∞–π–¥–µ–º–æ —é–∑–µ—Ä—ñ–≤ —è–∫—ñ —î –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∑–∞—Ä–∞–∑
const activeUsers = users.filter((user) => user.isActive);
// console.log("üöÄ ~ activeUssers:", activeUsers);
// –∑–Ω–∞–π–¥–µ–º–æ —é–∑–µ—Ä—ñ–≤ —è–∫—ñ —î –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∑–∞—Ä–∞–∑
const inActiveUsers = users.filter((user) => !user.isActive);
// console.log("üöÄ ~ inActiveUsers:", inActiveUsers);

//* Array.find() - array.find(callback[currentValue, index,array])

//* - –ø–µ—Ä–µ–±–∏—Ä–∞—î (–∫–æ–ª–µ–∫—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤) –¥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —ñ –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è
//* - –Ω–µ –∑–º—ñ–Ω—é—î (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ)
//* - –ø–æ–≤–µ—Ä—Ç–∞—î –µ–ª–µ–º–µ–Ω—Ç (1 –µ–ª–µ–º–µ–Ω—Ç)
//* - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ—à—É–∫—É —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤–∞

console.log(numbers.find((num) => num > 3));
console.log(numbers.find((num) => num < 1));
console.log(numbers.find((num) => num === 3));

// –ü—Ä–æ–π–¥–µ–º–æ—Å—å –ø–æ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö —ñ –∑–Ω–∞–π–¥–µ–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —é–∑–µ—Ä–∞
const userX = users.find((user) => user.id === "003");
console.log("üöÄ ~ userX:", userX);

// –°—Ç–≤–æ—Ä–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –Ω–∞ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function getUserId(arr, id) {
  return arr.find((x) => x.id === id);
}
console.log(getUserId(users, "001"));
console.log(getUserId(users, "004"));
console.log(getUserId(users, "005"));

//* Array.every(). and Array.some()  - array.every(callback[currentValue, index,array])

//* - –ø–µ—Ä–µ–±–∏—Ä–∞—î (–∫–æ–ª–µ–∫—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
//* - –Ω–µ –∑–º—ñ–Ω—é—î (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ)
//* - –ø–æ–≤–µ—Ä—Ç–∞—î true / false
//* - every - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, true - –∫–æ–ª–∏ –≤—Å—ñ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç
//* - some - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, true - —Ö–æ—á –æ–¥–∏–Ω –ø—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç

const isBig = (val) => val >= 10;

// every
console.log([12, 5, 3, 6, 130, 44].every(isBig)); // false
console.log([12, 54, 37, 62, 130, 44].every(isBig)); // true

// some
console.log([2, 5, 3, 6, 1, 4].some(isBig)); // false
console.log([1, 5, 3, 62, 1, 4].some(isBig)); // true

// fruits

const fruits = [
  { name: "apples", amount: 100 },
  { name: "bananas", amount: 0 },
  { name: "mango", amount: 50 },
];

const allAvailabe = fruits.every((fruit) => fruit.amount > 0);
console.log("üöÄ ~ allAvailabe:", allAvailabe);
const anyAvailabe = fruits.some((fruit) => fruit.amount > 0);
console.log("üöÄ ~ anyAvailabe:", anyAvailabe);

//* Array.reduce() -
//*  - array.reduce(callback[previousValue, currentItem, index,array], initialValue)

//* - previousValue - –ø—Ä–æ–º—ñ–∂–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∞–∫—É–º—É–ª—è—Ç–æ—Ä)
//* - currentItem - –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞
//* - index - —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤–∞
//* - array - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
//* - initialValue - —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ {}, [], 0 , ""

//* - –ø–µ—Ä–µ–±–∏—Ä–∞—î (–∫–æ–ª–µ–∫—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
//* - –Ω–µ –∑–º—ñ–Ω—é—î (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ)
//* - –ø–æ–≤–µ—Ä—Ç–∞—î —â–æ –∑–∞ –≤–≥–æ–¥–Ω–æ

const numbersReduce = [1, 2, 3, 4, 5];

const summ = numbersReduce.reduce((acc, value) => acc + value, 0);
console.log("üöÄ ~ summ:", summ);

const tweets = [
  { id: "000", likes: 5, tags: ["css", "html"] },
  { id: "001", likes: 7, tags: ["js", "ts"] },
  { id: "002", likes: 10, tags: ["sql", "nodejs", "php"] },
  { id: "003", likes: 9, tags: ["react", "angular", "vue"] },
  { id: "004", likes: 25, tags: ["python", "wordPress", "tailwind"] },
];
// –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ª–∞–π–∫–∏
const likes = tweets.reduce((totalLikes, tweet) => totalLikes + tweet.likes, 0);
console.log("üöÄ ~ likes:", likes);

// –∑–±–µ—Ä–µ–º–æ –≤—Å—ñ —Ç—î–≥—ñ
const tags = tweets.reduce((allTags, tweet) => {
  allTags.push(...tweet.tags);
  return allTags;
}, []);
console.log("üöÄ ~ tags ~ tags:", tags);

//* Array.sort() - array.sort(callback[currentValue, index,array])

//* - –ø–µ—Ä–µ–±–∏—Ä–∞—î (–∫–æ–ª–µ–∫—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
//* - –∑–º—ñ–Ω—é—î (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ)
//* - –ø–æ–≤–µ—Ä—Ç–∞—î –∑–º—ñ–Ω–µ–Ω—É –∫–æ–ª–µ–∫—Ü—ñ—é

const numbersSort = [3, 6, 5, 4, 1, 2, 7];
console.log("üöÄ ~ numbersSort:", numbersSort);

//console.log(numbersSort.sort());

//console.log("üöÄ ~ numbersSort:", numbersSort);

console.log(numbersSort.toSorted());

console.log("üöÄ ~ numbersSort:", numbersSort);

//* - –¥–æ–¥–∞—Ç–Ω—å–æ a > b
//* - –≤—ñ–¥—î–º–Ω–æ a < b

const sortByActiveDays = (a, b) => a.daysActive - b.daysActive;
console.log("üöÄ ~ sortByActiveDays:", users.sort(sortByActiveDays));

//* - –õ–∞–Ω—Ü—é–∂–∫—ñ –º–µ—Ç–æ–¥—ñ–≤

const numbersMetods = [1, 2, 3, 4, 5, 6, 7, 8, 9];

const result = numbersMetods
  .filter((x) => x % 2 === 0)
  .map((y) => y * 2)
  .reverse();
console.log("üöÄ ~ result:", result);
