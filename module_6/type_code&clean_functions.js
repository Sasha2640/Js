//! –Ü–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–π —Ç–∞ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–¥-------------------------------------------------

//? –Ü–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–¥ (–ø—ñ–¥—Ö—ñ–¥)

const numbers = [1, 2, 3, 4, 5];
const filteredNumbers = [];

for (let i = 0; i < numbers.length; i += 1) {
  if (numbers[i] > 3) {
    filteredNumbers.push(numbers[i]);
  }
}
console.log(filteredNumbers); // [4,5]

//? –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–¥ (–ø—ñ–¥—Ö—ñ–¥)

const filteredNumbersTwo = numbers.filter((value) => value > 3);
console.log("üöÄ ~ filteredNumbersTwo:", filteredNumbersTwo);

//! –ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ----------------------------------------------------------------------------------

//? –§—É–Ω–∫—Ü—ñ—è –∑ –ø–æ–±–æ—á–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏ - —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è  –º–æ–∂–µ –º–æ–∂–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∞–±–æ
//? –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö.

const numbersTwo = [1, 2, 3, 4, 5];

function dirtyFuntion(array, value) {
  for (let i = 0; i < array.length; i++) {
    array[i] = array[i] * value;
  }
}

//  dirtyFuntion(numbersTwo, 2);
console.log(numbersTwo);

//? –ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó - —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫–æ—ó –∑–∞–∞–¥–µ–∂–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
//? –ª–æ–∫–∞–ª—å–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥—ñ–º–æ—Å—Ç—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –Ω–µ –º—ñ–Ω—è—î –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω–Ω—ñ (–Ω–µ –º—É—Ç—É—î)

function pureFunction(array, value) {
  const result = [];

  for (let i = 0; i < array.length; i++) {
    result.push(array[i] * value);
  }

  return result;
}

const doubleNumbers = pureFunction(numbersTwo, 2);

console.log(numbersTwo);
console.log("üöÄ ~ doubleNumbers:", doubleNumbers);
