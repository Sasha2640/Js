//! –û–û–ü –ø–æ–±—É–¥–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ–º—É –Ω–∞—Å–ª—ñ—É–≤–∞–Ω–Ω—ñ –≤ JS

//? __proto__ - –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω—à–∏–π –æ–±—å–µ–∫—Ç

// const animal = { eats: true };
// const dog = { barks: true };

// dog.__proto__ = animal;

// console.log(dog.barks);
// console.log(dog.eats);
// console.log("üöÄ ~ dog:", dog.__proto__);
// const animal = { eats: true };
// const dog = { barks: true, eats: false };

// dog.__proto__ = animal;

// console.log(dog.barks);
// console.log(dog.eats);
// console.log("üöÄ ~ dog:", dog.__proto__);

//? Object.create(obj) - —â–æ–± –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≤–¥–∞—Ç–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø –æ–±—å–µ–∫—Ç–∞,
//? –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤–æ–≤—É—î–º–æ —Ü–µ–π –º–µ—Ç–æ–¥

// const animals = { eats: true };
// const dogs = Object.create(animals);
// dogs.barks = true;
// console.log("üöÄ ~ dogs:", dogs);

// console.log(dogs.barks);
// console.log(dogs.eats);

//? Object.prototype.hasOwnProperty()

const animals = { eats: true };
const dogs = Object.create(animals);
dogs.barks = true;
console.log("üöÄ ~ dogs:", dogs);

for (const key in dogs) {
  console.log(key);
}
for (const key in dogs) {
  if (!dogs.hasOwnProperty(key)) {
    continue;
  }
  console.log(key);
}
//? Object.keys(obj) - –ø–æ–≤–µ—Ä–Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±—å–µ–∫—Ç–∞ –≤ –º–∞—Å–∏–≤—ñ

const dogsKey = Object.keys(dogs);
console.log("üöÄ ~ dogsKey:", dogsKey);

//? Funtion.prototype - —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
//? - —Ü–µ —î –æ–±—å–µ–∫—Ç–æ–º
//? - –≤ –Ω—å–æ–≥–æ –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —ñ –º–µ—Ç–æ–¥–∏
//? - –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —ñ –º–µ—Ç–æ–¥–∏ prototype –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é
//? - __proto__ –æ–±—å–µ–∫—Ç—É
//? - —Ü –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ prototype –Ω–∞ –ø–æ—á–∞—Ç–∫—É —î –º–µ—Ç–æ–¥ constructor

const Guest = function (name, room) {
  this.name = name;
  this.room = room;
};
// console.log("üöÄ ~ Guest ~ Guest:", Guest.prototype);
const mango = new Guest("Mango", 27);
console.log("üöÄ ~ mango:", mango);

//* –¥–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ showGuestInfo
Guest.prototype.showGuestInfo = function () {
  console.log(`name guest: ${this.name}, room guest: ${this.room}`);
};
const qwe = new Guest("Qwerty", 39);

mango.showGuestInfo();
qwe.showGuestInfo();

//? –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å constructor

Guest.prototype = {
  constructor: Guest,
};

//? –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Å—Ç—É–∫—Ç–æ—Ä–∏

const Hero = function (name, xp) {
  this.name = name;
  this.xp = xp;
};
Hero.prototype.farmXp = function (amount) {
  console.log(`${this.name} farm ${amount} experiance points`);
  this.xp += amount;
};
const polly = new Hero("Polly_1999", 1000);
polly.farmXp(999);
console.log("üöÄ ~ polly:", polly);

const Warrior = function (name, xp, weapon) {
  Hero.call(this, name, xp);
  this.weapon = weapon;
};
Warrior.prototype = Object.create(Hero.prototype);
Warrior.prototype.constructor = Warrior;

Warrior.prototype.attack = function () {
  console.log(`${this.name} attacks with ${this.weapon}`);
};
const paladin = new Warrior("Paladin_1988", 500, "Palash");
console.log("üöÄ ~ paladin:", paladin);
paladin.attack();
paladin.farmXp(500);
const mag = new Warrior("Mag", 756, "Magic");
console.log("üöÄ ~ mag:", mag);
mag.attack();
mag.farmXp(227);
const asasin = new Warrior("Asasin", 903, "wood stick");
console.log("üöÄ ~ asasin:", asasin);
asasin.attack();
asasin.farmXp(2);
